use super::{Identifyer, TurtleDoc, Statement, Literal, Object, Directive, Triple};
use std::num::from_str_radix;

#[pub]
turtleDoc -> TurtleDoc
    = statement* {
        TurtleDoc{statements: Vec::new()}
    }

statement -> Statement
    = d:directive { Statement::Directive(d) }
    / t:triples '.' { Statement::Triple(t) }

#[pub]
directive -> Directive
    = p:prefixID { let (x,y) = p; Directive::PrefixID(x,y) }
    / b:base { Directive::Base(b) }

#[pub]
prefixID -> (String, String)
    = WS* '@prefix' WS+ p:PN_PREFIX? ':' WS* l:IRIREF WS* '.' {
        (match p{
            Some(e) => e,
            None => "".to_string(),
        }, l)
    }
    / "PREFIX" WS+ p:PN_PREFIX? ':' WS* l:IRIREF{
        (match p{
            Some(e) => e,
            None => "".to_string(),
        }, l)
    }

#[pub]
base -> String
    = '@base' WS* i:IRIREF WS* '.' { i }
    / "BASE" WS* i:IRIREF { i }

//sparqlPrefix = "PREFIX" PNAME_NS IRIREF

#[pub]
triples -> Triple
    = subject predicateObjectList {
        Triple{
            subject: Identifyer::NoID,
            predicate: Identifyer::NoID,
            object: Identifyer::NoID
        }
    }
    / blankNodePropertyList predicateObjectList? {
        Triple{
            subject: Identifyer::NoID,
            predicate: Identifyer::NoID,
            object: Identifyer::NoID
        }
    }

predicateObjectList = verb o:objectList (';' (verb objectList)?)* {()}
objectList -> Vec<Object>
    = f:object g:(',' object)* {
        Vec::new()
    }

verb = predicate / 'a'
subject
    = iri
    / BlankNode
    / collection
    
predicate = iri
object -> Object
    = iri { Object::Blank }
    / BlankNode { Object::Blank }
    / collection { Object::Collection }
    / blankNodePropertyList { Object::BlankNodePropertyList }
    / l:literal { Object::Literal(l) }

literal -> Literal
    = RDFLiteral { Literal::RDF(match_str.to_string()) }
    / i:NumericLiteral { Literal::Number(i) }
    / r:BooleanLiteral { Literal::Boolean(r) }

blankNodePropertyList = '[' predicateObjectList ']'
collection = '(' object* ')'
NumericLiteral -> f64
    = (INTEGER / DECIMAL / DOUBLE) { from_str_radix::<f64>(match_str,10).unwrap() }

RDFLiteral = String (LANGTAG / "^^" iri)? {()}

BooleanLiteral -> bool
    = 'true' {true}
    / 'false' {false}

String = STRING_LITERAL_QUOTE / STRING_LITERAL_SINGLE_QUOTE / STRING_LITERAL_LONG_SINGLE_QUOTE / STRING_LITERAL_LONG_QUOTE
iri
    = i:IRIREF { () }
    / PrefixedName
PrefixedName
    = PNAME_LN
    / PNAME_NS

BlankNode = BLANK_NODE_LABEL / ANON

//For terminals:

#[pub]
IRIREF -> String
    = '<' [^<>"\\]* '>' { match_str[1..match_str.len()-1].to_string() }
PNAME_NS = PN_PREFIX? ':' { () }
PNAME_LN = PNAME_NS PN_LOCAL
BLANK_NODE_LABEL = "_:" (PN_CHARS_U / [0-9]) ((PN_CHARS / '.')* PN_CHARS)? {()}
LANGTAG = '@' [a-zA-Z]+ ('-' [a-zA-Z0-9]+)*
INTEGER = [+-]? [0-9]+
DECIMAL = [+-]? [0-9]* '.' [0-9]+
DOUBLE = [+-]? ([0-9]+ '.' [0-9]* EXPONENT / '.' [0-9]+ EXPONENT / [0-9]+ EXPONENT)
EXPONENT = [eE] [+-]? [0-9]+
STRING_LITERAL_QUOTE = '"' ([^\u2200\u5C00\uA000\uD000] / ECHAR / UCHAR)* '"'
STRING_LITERAL_SINGLE_QUOTE = "'" ([^\u2700\u5C00\uA000\uD000] / ECHAR / UCHAR)* "'"
STRING_LITERAL_LONG_SINGLE_QUOTE = "'''" (("'" / "''")? ([^'\\] / ECHAR / UCHAR))* "'''"
STRING_LITERAL_LONG_QUOTE = '"""' (('"' / '""')? ([^\"\\] / ECHAR / UCHAR))* '"""'

UCHAR = '\\u' HEX HEX HEX HEX / '\\U' HEX HEX HEX HEX HEX HEX HEX HEX
ECHAR = '\\' [tbnrf\"\']

WS
    = [\u0020]
    / [\u0009]
    / [\u000D]
    / [\u000A]
    / COMMENT

COMMENT = '#'([^\u000A\u000D])*

ANON = '[' WS* ']'
PN_CHARS_BASE
    = [A-Z]
    / [a-z]
    / [\u00C0-\u00D6]
    / [\u00D8-\u00F6]
    / [\u00F8-\u02FF]
    / [\u0370-\u037D]
    / [\u037F-\u1FFF]
    / [\u200C-\u200D]
    / [\u2070-\u218F]
    / [\u2C00-\u2FEF]
    / [\u3001-\uD7FF]
    / [\uF900-\uFDCF]
    / [\uFDF0-\uFFFD]
    / [\u1000-\uEFFF]

PN_CHARS_U
    = PN_CHARS_BASE
    / "_"

PN_CHARS
    = PN_CHARS_U
    / "-"
    / [0-9]
    / [\u00B7]
    / [\u0300-\u036F]
    / [\u203F-\u2040]

PN_PREFIX -> String
    = PN_CHARS_BASE (PN_CHARS / '.')* { match_str.to_string() }

PN_LOCAL = (PN_CHARS_U / ':' / [0-9] / PLX) ((PN_CHARS / "." / ":" / PLX)* (PN_CHARS / ":" / PLX))? {()}

PLX = PERCENT / PN_LOCAL_ESC

PERCENT	= '%' HEX HEX
HEX = [0-9] / [A-F] / [a-f]
PN_LOCAL_ESC = '\\' ('_' / '~' / '.' / '-' / '!' / '$' / '&' / "'" / '(' / ')' / '*' / '+' / ',' / ';' / '=' / '/' / '?' / '#' / '@' / '%')
